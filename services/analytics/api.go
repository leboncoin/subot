package analytics

import (
	"fmt"
	"github.com/spf13/viper"
	"time"

	"github.com/swaggo/files"
	"github.com/swaggo/gin-swagger"

	_ "github.com/leboncoin/subot/services/analytics/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/gin-contrib/cors"
	"github.com/gin-contrib/sessions"
	"github.com/gin-contrib/sessions/cookie"
	"github.com/gin-gonic/gin"
	log "github.com/sirupsen/logrus"
	"net/http"
	auth "github.com/leboncoin/subot/pkg/auth/server"
	"github.com/leboncoin/subot/pkg/globals"
)

// @title Support Analytics API
// @version 1.0
// @description Analytics service for the Subot project
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.email clement.mondion@adevinta.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @schemes https
// @BasePath /v1
func runAPI(instance *Analyser, authHandler *http.Handler, authServer auth.AuthServer) {
	r := gin.Default()

	store := cookie.NewStore([]byte("sessionSuperSecret"))
	r.Use(sessions.Sessions("sessionName", store))

	r.Use(cors.New(cors.Config{
		AllowOrigins:     []string{
			viper.GetString("front_url"),
			viper.GetString("analytics_url"),
		},
		AllowMethods:     []string{"POST", "GET", "PUT", "PATCH", "DELETE"},
		AllowHeaders:     []string{"Origin", "Authorization"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	}))

	// use ginSwagger middleware to serve the API docs
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	r.GET("/ping", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"message": "pong",
		})
	})
	r.Any("/auth/*w", gin.WrapH(*authHandler))
	r.Any("/dex/*w", gin.WrapH(*authHandler))
	api := r.Group("/v1")
	{
		api.GET("/analytics", func(c *gin.Context) {
			start := c.DefaultQuery("start", "2019-01-01")
			end := c.DefaultQuery("end", time.Now().Format(globals.DateLayout))
			data, err := instance.Analyse(start, end)
			if err != nil {
				c.JSON(500, gin.H{
					"error": err.Error(),
				})
				return
			}
			c.JSON(200, gin.H{
				"start":     start,
				"end":       end,
				"analytics": data,
			})
		})
		analyticsAPI := api.Group("/analytics")
		{
			analyticsAPI.POST("/batch", func(c *gin.Context) {
				var messages []globals.Message
				if err := c.BindJSON(&messages); err != nil {
					c.JSON(400, gin.H{
						"error": err,
					})
					return
				}
				replies, err := instance.HandleBatchMessage(messages)
				if err != nil {
					c.JSON(500, gin.H{
						"error": err,
					})
					return
				}
				c.JSON(201, replies)
			})
			analyticsAPI.GET("/report", func(c *gin.Context) {
				start := c.Query("start")
				end := c.Query("end")
				log.WithFields(log.Fields{"start": start, "end": end}).Debug("Received report request")
				if start > end {
					c.JSON(400, gin.H{
						"error": "end is inferior to start time for report request",
					})
					return
				}
				report, err := instance.HandleReportRequest(start, end)
				if err != nil {
					c.JSON(500, gin.H{
						"error": err,
					})
					return
				}
				c.JSON(200, report)
			})
			analyticsAPI.GET("/reminders", func(c *gin.Context) {
				reminders, err := instance.HandleRemindersRequest()
				if err != nil {
					c.JSON(500, gin.H{
						"error": err,
					})
					return
				}
				c.JSON(200, reminders)
			})
			analyticsAPI.POST(fmt.Sprintf("/%s", globals.NewMessage), func(c *gin.Context) {
				var message globals.Message
				log.WithFields(log.Fields{"request": message}).Debug("Got new request")
				if err := c.BindJSON(&message); err != nil {
					c.JSON(400, gin.H{
						"error": err.Error(),
					})
					return
				}
				replies, err := instance.HandleMessage(message)
				if err != nil {
					c.JSON(500, gin.H{
						"error": err.Error(),
					})
					return
				}
				c.JSON(201, replies)
			})
			analyticsAPI.POST(fmt.Sprintf("/%s", globals.Thread), func(c *gin.Context) {
				var message globals.Reply
				if err := c.BindJSON(&message); err != nil {
					c.JSON(400, gin.H{
						"error": err.Error(),
					})
					return
				}
				replies, err := instance.HandleReplies(message)
				if err != nil {
					c.JSON(500, gin.H{
						"error": err.Error(),
					})
					return
				}
				c.JSON(201, replies)
			})
			analyticsAPI.POST(fmt.Sprintf("/%s", globals.MessageReaction), func(c *gin.Context) {
				var reaction globals.Reaction
				if err := c.BindJSON(&reaction); err != nil {
					c.JSON(400, gin.H{
						"error": err.Error(),
					})
					return
				}
				replies, err := instance.HandleReaction(reaction)
				if err != nil {
					c.JSON(500, gin.H{
						"error": err.Error(),
					})
					return
				}
				c.JSON(201, replies)
			})
			analyticsAPI.POST(fmt.Sprintf("/%s", globals.TopicChange), func(c *gin.Context) {
				var message globals.Message
				if err := c.BindJSON(&message); err != nil {
					c.JSON(400, gin.H{
						"error": err.Error(),
					})
					return
				}
				replies, err := instance.HandleFiremanChange(message)
				if err != nil {
					c.JSON(500, gin.H{
						"error": err.Error(),
					})
					return
				}
				c.JSON(201, replies)
			})
			analyticsAPI.POST(fmt.Sprintf("/%s", globals.Join), func(c *gin.Context) {
				var eventRequest globals.Message
				if err := c.BindJSON(&eventRequest); err != nil {
					c.JSON(400, gin.H{
						"error": err.Error(),
					})
					return
				}
				replies, err := instance.HandleJoinMessage(eventRequest)
				if err != nil {
					c.JSON(500, gin.H{
						"error": err.Error(),
					})
					return
				}
				c.JSON(201, replies)
			})
			analyticsAPI.POST(fmt.Sprintf("/%s", globals.DeletedMessage), func(c *gin.Context) {
				var eventRequest globals.Message
				if err := c.BindJSON(&eventRequest); err != nil {
					c.JSON(400, gin.H{
						"error": err.Error(),
					})
					return
				}
				replies, err := instance.HandleDeletedMessage(eventRequest)
				if err != nil {
					c.JSON(500, gin.H{
						"error": err.Error(),
					})
					return
				}
				c.JSON(201, replies)
			})
			analyticsAPI.POST(fmt.Sprintf("/%s", globals.UpdatedMessage), func(c *gin.Context) {
				var eventRequest globals.Message
				if err := c.BindJSON(&eventRequest); err != nil {
					c.JSON(400, gin.H{
						"error": err.Error(),
					})
					return
				}
				replies, err := instance.HandleUpdatedMessage(eventRequest)
				if err != nil {
					c.JSON(500, gin.H{
						"error": err.Error(),
					})
					return
				}
				c.JSON(201, replies)
			})
			analyticsAPI.POST("/feedback", func(c *gin.Context) {
				var interaction globals.Interaction
				if err := c.BindJSON(&interaction); err != nil {
					c.JSON(400, gin.H{
						"error": err.Error(),
					})
					return
				}
				replies, err := instance.handleFeedback(interaction)
				if err != nil {
					c.JSON(500, gin.H{
						"error": err.Error(),
					})
					return
				}
				c.JSON(201, replies)
			})
		}
		answersAPI := api.Group("/answers")
		{
			answersAPI.GET("", instance.GetAnswers)
		}
		labelsAPI := api.Group("/labels")
		{
			labelsAPI.GET("", instance.GetLabels)
		}
		teamAPI := api.Group("/team")
		{
			teamAPI.GET("", instance.GetTeamMembers)
		}
		toolsAPI := api.Group("/tools")
		{
			toolsAPI.GET("", instance.GetTools)
		}
		adminAPI := api.Group("/admin")
		adminAPI.Use(authServer.AuthenticationRequired(true))
		{
			labelsAdminAPI := adminAPI.Group("/labels")
			labelsAdminAPI.POST("/new", instance.AddLabel)
			labelsAdminAPI.PUT("/:label", instance.EditLabel)
			labelsAdminAPI.DELETE("/:label", instance.DeleteLabel)
		}
		toolsAdminAPI := adminAPI.Group("/tools")
		{
			toolsAdminAPI.POST("/new", instance.AddTool)
			toolsAdminAPI.PUT("/:tool", instance.EditTool)
			toolsAdminAPI.DELETE("/:tool", instance.DeleteTool)
		}
		teamAdminAPI := adminAPI.Group("/team")
		{
			teamAdminAPI.POST("/new", instance.AddTeamMember)
			teamAdminAPI.PUT("/:team_member", instance.EditTeamMember)
			teamAdminAPI.DELETE("/:team_member", instance.DeleteTeamMember)
		}
		answersAdminAPI := adminAPI.Group("/answers")
		{
			answersAdminAPI.POST("/new", instance.AddAnswer)
			answersAdminAPI.PUT("/:documentID", instance.EditAnswer)
			answersAdminAPI.DELETE("/:documentID", instance.DeleteAnswer)

		}
		messagesAdminAPI := adminAPI.Group("/messages")
		{
			messagesAdminAPI.PUT("/:message_ts", instance.EditMessage)
			messagesAdminAPI.DELETE("/:message_ts", instance.DeleteMessage)
		}
	}
	err := r.Run() // listen and serve on 0.0.0.0:8080
	if err != nil {
		log.Fatalf("Could not serve server : %s", err)
	}
}
